---
import type { GetStaticPaths, InferGetStaticParamsType, MarkdownInstance } from 'astro'
import BaseLayout from '../../layouts/BaseLayout.astro'
import type { BlogFrontMatterSchema } from '../../types'

export const getStaticPaths = (async () => {
  const allPosts = import.meta.glob<MarkdownInstance<BlogFrontMatterSchema>>('../posts/*.md', { eager: true })
  // const allPosts = await Astro.glob('../posts/*.md', { eager: true })
  const uniqueTags = [...new Set(Object.values(allPosts).map(post => post.frontmatter.tags).flat())]

  return uniqueTags.map(tag => {
    const filteredPosts = Object.values(allPosts).filter(post => post.frontmatter.tags.includes(tag))
    return {
      params: { tag },
      props: { posts: filteredPosts }
    }
  })
}) satisfies GetStaticPaths

type Params = InferGetStaticParamsType<typeof getStaticPaths>
const { tag } = Astro.params
const { posts } = Astro.props
---

<BaseLayout pageTitle={tag}>
  <p>{tag}のタグが追加記事</p>

  <ul>
    {posts.map(post => (
      <li>
        <a href={post.url}>
          {post.frontmatter.title}
        </a>
      </li>
    ))}
  </ul>
</BaseLayout>
